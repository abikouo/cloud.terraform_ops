---
- name: Test Role 'azurerm_backend'
  block:
    # Create Azurerm backend
    - name: Create AzureRM backend for Terraform
      ansible.builtin.include_role:
        name: cloud.terraform_ops.azurerm_backend
      vars:
        azurerm_backend_resource_group_name: "{{ resource_group }}"

    - name: Ensure a Storage account has been created
      ansible.builtin.fail:
        msg: "A storage account variable has not been set by the role, missing variable named 'azurerm_backend_storage_account_name'"
      when: azurerm_backend_storage_account_name is undefined

    - name: Read storage account information
      azure.azcollection.azure_rm_storageaccount_info:
        name: "{{ azurerm_backend_storage_account_name }}"
        resource_group: "{{ resource_group }}"
      register: storage_account

    - name: Ensure the Storage account exists
      ansible.builtin.assert:
        that:
          - storage_account.storageaccounts | length > 0

    # Apply Terraform configuration using Azure backend
    - name: Create temporary directory to run Terraform configuration
      ansible.builtin.tempfile:
        state: directory
        suffix: .terraform
      register: tmpdir

    - name: Generate Terraform configuration
      ansible.builtin.template:
        src: 'main.tf.j2'
        dest: "{{ tmpdir.path }}/main.tf"

    - name: Apply Terraform configuration
      cloud.terraform.terraform:
        state: present
        project_path: "{{ tmpdir.path }}"
        force_init: true

    # Download terraform state file from storage account
    - name: Download the state file from storage account container
      azure.azcollection.azure_rm_storageblob:
        resource_group: "{{ resource_group }}"
        storage_account_name: "{{ azurerm_backend_storage_account_name }}"
        container: "{{ azurerm_backend_container_name }}"
        blob: "{{ azurerm_backend_tfstate_file }}"
        dest: "{{ tmpdir.path }}/content.tfstate"
      register: download

    - name: Ensure file is not empty
      ansible.builtin.assert:
        that:
          - download.blob.content_length > 0
          - download.blob.content_settings.content_type == "application/json"

    # Delete the Backend resources
    - name: Delete AzureRM Backend resources
      ansible.builtin.include_role:
        name: cloud.terraform_ops.azurerm_backend
      vars:
        azurerm_backend_operation: delete
        azurerm_backend_resource_group_name: "{{ resource_group }}"

    - name: Get resource group info
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ resource_group }}"
      register: rg_info

    - name: Ensure the resource group does exist anymore
      ansible.builtin.assert:
        that:
          - rg_info.resourcegroups | length == 0

  always:
    - name: Delete temporary directory
      ansible.builtin.file:
        state: absent
        path: "{{ tmpdir.path }}"
      when: tmpdir is defined
